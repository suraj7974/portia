name: Create Release PR

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (alpha/release)'
        required: true
        type: choice
        options:
          - alpha
          - release
      bump_type:
        description: 'Version bump type (v{major}.{minor}.{patch})'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: 'patch'

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(uv version --short)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          # Remove potential alpha suffix from current version
          BASE_VERSION=$(echo "${{ steps.current_version.outputs.current_version }}" | sed 's/a[0-9]\+$//')
          
          # Bump version according to input
          case "${{ inputs.bump_type }}" in
            patch)
              NEW_VERSION=$(echo $BASE_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
              ;;
            minor)
              NEW_VERSION=$(echo $BASE_VERSION | awk -F. '{$(NF-1) = $(NF-1) + 1; $NF = 0;} 1' | sed 's/ /./g')
              ;;
            major)
              NEW_VERSION=$(echo $BASE_VERSION | awk -F. '{$1 = $1 + 1; $(NF-1) = 0; $NF = 0;} 1' | sed 's/ /./g')
              ;;
          esac
          
          # Add alpha suffix if requested
          if [ "${{ inputs.release_type }}" = "alpha" ]; then
            NEW_VERSION="${NEW_VERSION}a0"
          fi
          
          # Set output for next steps
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create release branch and update version
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git checkout -b release/v${{ steps.bump_version.outputs.new_version }}
          
          # Update version in release branch
          uv version ${{ steps.bump_version.outputs.new_version }}
          
          git add pyproject.toml
          git commit -m "Bump version to v${{ steps.bump_version.outputs.new_version }}"
          git push origin release/v${{ steps.bump_version.outputs.new_version }}

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEPLOY_PAT_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release v${{ steps.bump_version.outputs.new_version }}`,
              body: `Automated PR for version bump to v${{ steps.bump_version.outputs.new_version }}`,
              head: `release/v${{ steps.bump_version.outputs.new_version }}`,
              base: 'main'
            });
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['release']
            });